name: FastAPI Code Quality Checks

# develop, main 브랜치를 상대로 풀 리퀘스트가 생성될 때 CI가 실행됩니다.
on:
  pull_request:
    branches:
      - "main"
      - "develop"

jobs:
  ci:
    # 가장 최신 버전의 Ubuntu를 OS 환경으로 설정합니다.
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Cache Poetry
        id: cache-poetry
        uses: actions/cache@v3
        with:
          key: poetry-2.0.0
          path: ~/.local/ # poetry 의 실제 설치 경로를 통째로 캐시함.

      - name: Install Poetry
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: | # 개행을 하여 여러줄로 명령어를 사용하고 싶을때 파이프라인 기호 | 를 사용한다.
          curl -sSL https://install.python-poetry.org | python3 -

      # 포에트리 환경변수를 깃허브 패스(.zshrc 같은 쉘 설정파일)에 기입하여 포에트리 명령어를 사용할 수 있게 합니다.
      - name: Register Poetry bin
        run: echo "${HOME}/.poetry/bin" >> $GITHUB_PATH

      - name: Cache dependencies
        id: cache-venv
        uses: actions/cache@v3
        with:
          # hashFiles를 사용하여 파일의 해시값을 비교하여 파이썬 버전이 바뀌었을 때, lock 파일이나 toml 파일이 바뀌었을때 종속성을 재설치합니다.
          # 바뀐 것이 없는 경우에는 캐싱된 종속성을 사용합니다.
          key: python-${{ steps.setup-python.outputs.python-version }}-poetry-lock-${{ hashFiles('fastapi_app/poetry.lock') }}-toml-${{ hashFiles('fastapi_app/pyproject.toml') }}-poetry-2.0.0
          path: /home/runner/.cache/pypoetry/virtualenvs/

      - name: Install dependencies
        working-directory: fastapi_app
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: poetry install --no-root

      - name: Run isort (Import sorting)
        working-directory: fastapi_app
        run: |
          poetry run isort . --check --diff

      - name: Run black (Code formatting)
        working-directory: fastapi_app
        run: |
          poetry run black . --check

      - name: Set multiline environment variable
        run: |
          mkdir -p fastapi_app/envs
          echo "${{ secrets.FASTAPI_ENVS }}" >> fastapi_app/envs/.local.env

      - name: Run Mypy
        working-directory: fastapi_app
        run: poetry run mypy .
