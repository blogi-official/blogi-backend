name: Django Code Quality Checks

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "main"
      - "develop"

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Cache Poetry
        id: cache-poetry
        uses: actions/cache@v3
        with:
          key: poetry-2.0.0
          path: ~/.local/

      - name: Install Poetry
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Register Poetry bin
        run: echo "${HOME}/.poetry/bin" >> $GITHUB_PATH

      - name: Cache dependencies
        id: cache-venv
        uses: actions/cache@v3
        with:
          key: python-${{ steps.setup-python.outputs.python-version }}-poetry-lock-${{ hashFiles('django_app/poetry.lock') }}-toml-${{ hashFiles('django_app/pyproject.toml') }}-poetry-2.0.0
          path: /home/runner/.cache/pypoetry/virtualenvs/

      - name: Install dependencies
        working-directory: django_app
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: poetry install --no-root

      - name: Run isort (Import sorting)
        working-directory: django_app
        run: poetry run isort . --check --diff

      - name: Run black (Code formatting)
        working-directory: django_app
        run: poetry run black . --check

      - name: Set multiline environment variable
        run: |
          mkdir -p django_app/envs
          echo "${{ secrets.DJANGO_ENVS }}" >> django_app/envs/.local.env

      - name: Run Mypy
        working-directory: django_app
        env:
          DJANGO_SETTINGS_MODULE: config.settings.local
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
        run: poetry run mypy .

  test:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:14
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pw1234
          POSTGRES_DB: blogi
          TZ: Asia/Seoul
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Cache Poetry
        id: cache-poetry
        uses: actions/cache@v3
        with:
          key: poetry-2.0.0
          path: ~/.local/

      - name: Install Poetry
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Register Poetry bin
        run: echo "${HOME}/.poetry/bin" >> $GITHUB_PATH

      - name: Cache dependencies
        id: cache-venv
        uses: actions/cache@v3
        with:
          key: python-${{ steps.setup-python.outputs.python-version }}-poetry-lock-${{ hashFiles('django_app/poetry.lock') }}-toml-${{ hashFiles('django_app/pyproject.toml') }}-poetry-2.0.0
          path: /home/runner/.cache/pypoetry/virtualenvs/

      - name: Install dependencies
        working-directory: django_app
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: poetry install --no-root

      - name: Set multiline environment variable
        run: |
          mkdir -p django_app/envs
          echo "${{ secrets.DJANGO_ENVS }}" >> django_app/envs/.local.env

      - name: Run Django Migration
        working-directory: django_app
        env:
          DJANGO_SETTINGS_MODULE: config.settings.local
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
        run: poetry run python manage.py migrate

      - name: Check each app has test & Run coverage
        working-directory: django_app
        env:
          DJANGO_SETTINGS_MODULE: config.settings.local
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
        run: |
          ran_tests=false
          apps="community courses qna tests users"

          for app_name in $apps; do
            app_path="apps/$app_name"
            if [ -d "$app_path" ]; then
              test_files=$(find "$app_path" -type f \( -name "tests.py" -o -name "test_*.py" \))
              if [ -n "$test_files" ] && grep -q "def test_" $test_files 2>/dev/null; then
                echo "✅ Running tests for $app_name"
                poetry run coverage run --source="$app_path" --append manage.py test "apps.$app_name"
                ran_tests=true
              else
                echo "⚠️  No test functions found in $app_name"
              fi
            else
              echo "⛔️ Directory not found for $app_name"
            fi
          done

          if [ "$ran_tests" = true ]; then
            poetry run coverage report -m
          else
            echo "🚫 No tests were run. Skipping coverage report."
          fi
