name: docker-deploy

on:
  push:
    branches: [develop]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: NCP

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      # Buildx 설정 (캐시 없이)
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # === Django 이미지 ===
      - name: Build & Push Django
        uses: docker/build-push-action@v6
        with:
          context: ./django_app
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/blogi_docker_ncp:django

      # === FastAPI 이미지 ===
      - name: Build & Push FastAPI
        uses: docker/build-push-action@v6
        with:
          context: ./fastapi_app
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/blogi_docker_ncp:fastapi

      # === Nginx 이미지 ===
      - name: Build & Push Nginx
        uses: docker/build-push-action@v6
        with:
          context: ./resources/nginx
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/blogi_docker_ncp:nginx

      # SSH 배포
      - name: NCP ssh connection and deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.NCP_HOST }}
          username: ${{ secrets.NCP_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          command_timeout: 30m
          script: |
            set -euo pipefail
            export COMPOSE_HTTP_TIMEOUT=600 DOCKER_CLIENT_TIMEOUT=600
            cd /root

            # DockerHub 로그인
            echo '${{ secrets.DOCKERHUB_ACCESS_TOKEN }}' | docker login -u '${{ secrets.DOCKERHUB_USERNAME }}' --password-stdin

            # 최신 이미지로 갱신
            docker compose pull --quiet || true
            docker compose up -d --remove-orphans

            # 불필요한 이미지/컨테이너/볼륨 즉시 삭제
            docker system prune -af --volumes
