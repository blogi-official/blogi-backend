services:
  django:
    container_name: django
    env_file:
      - django_app/envs/.local.env
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.local
    build:
      context: ./django_app
    working_dir: /blogi-backend/django_app
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --workers 3 --worker-class=uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000 config.asgi:application
             "
    ports:
      - "8000:8000"
    volumes:
      - static_volume:/blogi/app/static
      - media_volume:/blogi/app/media
    networks:
      - ws
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  fastapi:
    container_name: fastapi
    env_file:
      - fastapi_app/envs/.local.env
    build:
      context: ./fastapi_app
    working_dir: /blogi-backend/fastapi_app
    command: >
      uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8001:8000"
    volumes:
      - ./fastapi_app:/app
    networks:
      - ws
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - django
      - fastapi
    volumes:
      - ./resources/nginx/nginx.local.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/blogi/app/static
      - media_volume:/blogi/app/media
    networks:
      - ws

  db:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pw1234
      POSTGRES_ROOT_USER: postgres
      POSTGRES_DB: blogi
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ws
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - ws
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

networks:
  ws:
    driver: bridge

volumes:
  static_volume:
  media_volume:
  postgres_data: